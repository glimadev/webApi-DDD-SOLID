<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	var nullables = new string[] { "string", "Nullable<int>", "Nullable<bool>"};
	var ignoreAttrs = new string[] { "Active", "EditedDate", "CreatedDate", "DeletedDate", "Deleted"};
	var idParameter = "Id";
#>
using System;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace Api.Architecture.Domain.Entities
{
    public sealed partial class <#= efHost.EntityType.Name #> : Entity
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#			foreach (var property in efHost.EntityType.Properties)
			{
				var typeUsage = code.Escape(property.TypeUsage);

				if (nullables.Contains(typeUsage))
				{
					if (code.Escape(property) != code.Escape(efHost.EntityType) + idParameter)
                    {
#>			this.<#= code.Escape(property) #> = null;
<#
                    }
					else
					{
#>			this.<#= code.Escape(property) #> = Guid.NewGuid().ToString();
<#                    }
                }
            }
#>
<#
			foreach (var navProperty in collectionNavigations)
			{
#>			this.<#= code.Escape(navProperty) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
			}
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
		if (!ignoreAttrs.Contains(code.Escape(property)))
		{
			var typeUsage = code.Escape(property.TypeUsage);

			// Fix-up spatial types for EF6
			if (efHost.EntityFrameworkVersion >= new Version(6, 0)
				&& typeUsage.StartsWith("System.Data.Spatial."))
			{
				typeUsage = typeUsage.Replace(
					"System.Data.Spatial.",
					"System.Data.Entity.Spatial.");
			}
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; private set; }
		
<#
		}
    }

    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
#>
        public ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(navProperty) #> { get; private set; }
<#
        }
        else
        {
#>
        public <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(navProperty) #> { get; private set; }
<#
        }
    }
#>
    }
}
